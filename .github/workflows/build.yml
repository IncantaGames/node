name: Build from tarball

on:
  push:
    branches:
      - v14.x

env:
  FLAKY_TESTS: dontcare

jobs:
  build-unix:
    if: ${{ !startsWith(github.event.head_commit.message, '[Github Actions]') && !startsWith(github.event.head_commit.message, '[Skip CI]') }} # Prevent recursive builds
    env:
      PYTHON_VERSION: 3.9
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Environment Information
        run: npx envinfo
      - name: Build
        run: |
          export DISTTYPE=release
          export DATESTRING=`date "+%Y-%m-%d"`
          export COMMIT=$(git rev-parse --short=10 "$GITHUB_SHA")
          ./configure --shared && make -j3 SKIP_XZ=1
      - run: cp -f ./Release/libnode.a ./binaries/
      - run: cp -f ./Release/libnode.so ./binaries/
        if: startsWith(matrix.os, 'ubuntu')
      - run: cp -f ./Release/libnode.dylib ./binaries/
        if: startsWith(matrix.os, 'macos')
      - name: Configure Git
        run: |
          git config --global user.email "seesemichaelj@users.noreply.github.com"
          git config --global user.name "Mike Seese"
          git config pull.rebase true
      - run: git add binaries
      - run: git checkout -b temp_${{ github.sha }} # create it if it doesn't exist
        continue-on-error: true
      - run: git push origin temp_${{ github.sha }}
        continue-on-error: true
      - run: git checkout temp_${{ github.sha }} # checkout if it already existed
      - run: git fetch
      - run: git branch -u origin/temp_${{ github.sha }} temp_${{ github.sha }}
      - name: Commit
        run: git commit -m "[GitHub Actions] Updated ${{ matrix.os }} NodeJS ${{ matrix.node }} binaries" || true
      - name: Push
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 20
          retry_wait_seconds: 5
          on_retry_command: git pull
          command: git push origin temp_${{ github.sha }}

  build-windows:
    if: ${{ !startsWith(github.event.head_commit.message, '[Github Actions]') && !startsWith(github.event.head_commit.message, '[Skip CI]') }} # Prevent recursive builds
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install deps
        run: choco install nasm
      - name: Environment Information
        run: npx envinfo
      - name: Build
        run: ./vcbuild.bat dll release
      - name: Copy Binaries
        run: |
          cp -Force ./Release/libnode.lib ./binaries/
          cp -Force ./Release/libnode.dll ./binaries/
      - name: Configure Git
        run: |
          git config --global user.email "seesemichaelj@users.noreply.github.com"
          git config --global user.name "Mike Seese"
          git config pull.rebase true
      - run: git add binaries
      - run: git checkout -b temp_${{ github.sha }} # create it if it doesn't exist
        continue-on-error: true
      - run: git push origin temp_${{ github.sha }}
        continue-on-error: true
      - run: git checkout temp_${{ github.sha }} # checkout if it already existed
      - run: git fetch
      - run: git branch -u origin/temp_${{ github.sha }} temp_${{ github.sha }}
      - name: Commit
        run: git commit -m "[GitHub Actions] Updated ${{ matrix.os }} NodeJS ${{ matrix.node }} binaries" || true
      - name: Push
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 20
          retry_wait_seconds: 5
          on_retry_command: git pull
          command: git push origin temp_${{ github.sha }}

  commit-to-master:
    if: ${{ !startsWith(github.event.head_commit.message, '[Github Actions]') && !startsWith(github.event.head_commit.message, '[Skip CI]') }} # Prevent recursive builds
    needs: [build-unix, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure Git
        run: |
          git config --global user.email "seesemichaelj@users.noreply.github.com"
          git config --global user.name "Mike Seese"
          git config pull.rebase true
      - run: git fetch origin
      - run: git merge --squash origin/temp_${{ github.sha }}
      - name: Commit
        run: git commit -m "[GitHub Actions] Updated all binaries" || true
      - name: Push
        uses: nick-invision/retry@v2 # retry just in case a person is pushing simultaneously
        with:
          timeout_minutes: 1
          max_attempts: 3
          retry_wait_seconds: 5
          on_retry_command: git pull
          command: git push origin
      - name: Delete Temporary Branch
        run: git push origin --delete temp_${{ github.sha }}
